openapi: 3.0.3
info:
  title: KC_COMMERCE
  version: 1.0.0
  description: API para com√©rcios. Compra, venda, carrinho, pedidos e lista de desejos.
paths:
  /api/carts/:
    post:
      operationId: carts_create
      tags:
      - carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartProduct'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProduct'
          description: ''
  /api/carts/{id}/:
    delete:
      operationId: carts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - carts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/carts/user/:
    get:
      operationId: carts_user_list
      tags:
      - carts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartProductList'
          description: ''
  /api/favorites/:
    post:
      operationId: favorites_create
      tags:
      - favorites
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoritesProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FavoritesProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FavoritesProduct'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesProduct'
          description: ''
  /api/favorites/{id}/:
    delete:
      operationId: favorites_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - favorites
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/favorites/user/:
    get:
      operationId: favorites_user_list
      tags:
      - favorites
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteList'
          description: ''
  /api/orders/:
    get:
      operationId: orders_list
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
          description: ''
    post:
      operationId: orders_create
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Orders'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Orders'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
          description: ''
    put:
      operationId: orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Orders'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Orders'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
          description: ''
    patch:
      operationId: orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrders'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrders'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
          description: ''
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/:
    get:
      operationId: products_list
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: products_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: Updated Product
      description: Updated product by id
      summary: Updated by id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: Deleta Product
      description: Delete product by id
      summary: Delete by id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{user_id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/users/sales/:
    get:
      operationId: users_sales_list
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInSales'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        country:
          type: string
          maxLength: 40
        state:
          type: string
          maxLength: 2
        city:
          type: string
          maxLength: 40
        road:
          type: string
          maxLength: 120
      required:
      - city
      - country
      - id
      - road
      - state
    CartProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
          readOnly: true
        product:
          type: integer
      required:
      - cart
      - id
      - product
    CartProductList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
          readOnly: true
        product:
          $ref: '#/components/schemas/Product'
      required:
      - cart
      - id
      - product
    FavoriteList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        favorite:
          type: integer
          readOnly: true
        product:
          $ref: '#/components/schemas/Product'
      required:
      - favorite
      - id
      - product
    FavoritesProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        favorite:
          type: integer
          readOnly: true
        product:
          type: integer
      required:
      - favorite
      - id
      - product
    Orders:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserSerializerInProduct'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - products
      - user
    OrdersSale:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        user:
          allOf:
          - $ref: '#/components/schemas/UserSales'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - user
    PatchedOrders:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserSerializerInProduct'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 140
        category:
          type: string
          maxLength: 20
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        url:
          type: string
        description:
          type: string
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_available:
          type: boolean
        user:
          allOf:
          - $ref: '#/components/schemas/UserSerializerInProduct'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 60
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          maxLength: 128
        isAdmin:
          type: boolean
          nullable: true
          default: false
        address:
          $ref: '#/components/schemas/Address'
        typeUser:
          $ref: '#/components/schemas/TypeUserEnum'
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 140
        category:
          type: string
          maxLength: 20
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        url:
          type: string
        description:
          type: string
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_available:
          type: boolean
        user:
          allOf:
          - $ref: '#/components/schemas/UserSerializerInProduct'
          readOnly: true
      required:
      - category
      - description
      - id
      - name
      - price
      - stock
      - url
      - user
    ProductInSales:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 140
        category:
          type: string
          maxLength: 20
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        url:
          type: string
        description:
          type: string
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrdersSale'
          readOnly: true
      required:
      - category
      - description
      - id
      - name
      - orders
      - price
      - url
    StatusEnum:
      enum:
      - Pedido realizado
      - Em andamento
      - Entregue
      type: string
      description: |-
        * `Pedido realizado` - Pedido Realizado
        * `Em andamento` - Em Andamento
        * `Entregue` - Entregue
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TypeUserEnum:
      enum:
      - user
      - seller
      - admin
      type: string
      description: |-
        * `user` - User
        * `seller` - Seller
        * `admin` - Admin
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 60
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          maxLength: 128
        isAdmin:
          type: boolean
          nullable: true
          default: false
        address:
          $ref: '#/components/schemas/Address'
        typeUser:
          $ref: '#/components/schemas/TypeUserEnum'
      required:
      - address
      - email
      - id
      - password
      - username
    UserSales:
      type: object
      properties:
        username:
          type: string
          maxLength: 60
        email:
          type: string
          format: email
          maxLength: 120
        address:
          $ref: '#/components/schemas/Address'
      required:
      - address
      - email
      - username
    UserSerializerInProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 60
        email:
          type: string
          format: email
          maxLength: 120
      required:
      - email
      - id
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
